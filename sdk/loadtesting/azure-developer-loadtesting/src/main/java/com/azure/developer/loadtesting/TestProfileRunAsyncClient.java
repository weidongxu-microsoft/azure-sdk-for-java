// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.developer.loadtesting.implementation.TestProfileRunClientImpl;
import com.azure.developer.loadtesting.models.TestProfileRun;
import java.time.OffsetDateTime;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous TestProfileRunClient type.
 */
@ServiceClient(builder = TestProfileRunClientBuilder.class, isAsync = true)
public final class TestProfileRunAsyncClient {
    @Generated
    private final TestProfileRunClientImpl serviceClient;

    /**
     * Initializes an instance of TestProfileRunAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    TestProfileRunAsyncClient(TestProfileRunClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create and start a new test profile run.
     * 
     * Create and start a new test profile run with the given test profile run Id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testProfileRunId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testProfileId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     status: String(ACCEPTED/NOTSTARTED/EXECUTING/DONE/CANCELLING/CANCELLED/FAILED) (Optional)
     *     errorDetails (Optional): [
     *          (Optional){
     *             message: String (Optional)
     *         }
     *     ]
     *     startDateTime: OffsetDateTime (Optional)
     *     endDateTime: OffsetDateTime (Optional)
     *     durationInSeconds: Long (Optional)
     *     testRunDetails (Optional): {
     *         String (Required): {
     *             status: String(ACCEPTED/NOTSTARTED/PROVISIONING/PROVISIONED/CONFIGURING/CONFIGURED/EXECUTING/EXECUTED/DEPROVISIONING/DEPROVISIONED/DONE/CANCELLING/CANCELLED/FAILED/VALIDATION_SUCCESS/VALIDATION_FAILURE) (Required)
     *             configurationId: String (Required)
     *             properties (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     recommendations (Optional): [
     *          (Optional){
     *             category: String(ThroughputOptimized/CostOptimized) (Required)
     *             configurations (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testProfileRunId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testProfileId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     status: String(ACCEPTED/NOTSTARTED/EXECUTING/DONE/CANCELLING/CANCELLED/FAILED) (Optional)
     *     errorDetails (Optional): [
     *          (Optional){
     *             message: String (Optional)
     *         }
     *     ]
     *     startDateTime: OffsetDateTime (Optional)
     *     endDateTime: OffsetDateTime (Optional)
     *     durationInSeconds: Long (Optional)
     *     testRunDetails (Optional): {
     *         String (Required): {
     *             status: String(ACCEPTED/NOTSTARTED/PROVISIONING/PROVISIONED/CONFIGURING/CONFIGURED/EXECUTING/EXECUTED/DEPROVISIONING/DEPROVISIONED/DONE/CANCELLING/CANCELLED/FAILED/VALIDATION_SUCCESS/VALIDATION_FAILURE) (Required)
     *             configurationId: String (Required)
     *             properties (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     recommendations (Optional): [
     *          (Optional){
     *             category: String(ThroughputOptimized/CostOptimized) (Required)
     *             configurations (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param testProfileRunId Unique identifier for the test profile run, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param body The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test Profile Run model along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateTestProfileRunWithResponse(String testProfileRunId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateTestProfileRunWithResponseAsync(testProfileRunId, body, requestOptions);
    }

    /**
     * Delete an existing load test profile run.
     * 
     * Delete an existing load test profile run by providing the test profile run Id.
     * 
     * @param testProfileRunId Unique identifier for the test profile run, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTestProfileRunWithResponse(String testProfileRunId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteTestProfileRunWithResponseAsync(testProfileRunId, requestOptions);
    }

    /**
     * Get test profile run details.
     * 
     * Get test profile run details by test profile run Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testProfileRunId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testProfileId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     status: String(ACCEPTED/NOTSTARTED/EXECUTING/DONE/CANCELLING/CANCELLED/FAILED) (Optional)
     *     errorDetails (Optional): [
     *          (Optional){
     *             message: String (Optional)
     *         }
     *     ]
     *     startDateTime: OffsetDateTime (Optional)
     *     endDateTime: OffsetDateTime (Optional)
     *     durationInSeconds: Long (Optional)
     *     testRunDetails (Optional): {
     *         String (Required): {
     *             status: String(ACCEPTED/NOTSTARTED/PROVISIONING/PROVISIONED/CONFIGURING/CONFIGURED/EXECUTING/EXECUTED/DEPROVISIONING/DEPROVISIONED/DONE/CANCELLING/CANCELLED/FAILED/VALIDATION_SUCCESS/VALIDATION_FAILURE) (Required)
     *             configurationId: String (Required)
     *             properties (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     recommendations (Optional): [
     *          (Optional){
     *             category: String(ThroughputOptimized/CostOptimized) (Required)
     *             configurations (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param testProfileRunId Unique identifier for the test profile run, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test profile run details by test profile run Id along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestProfileRunWithResponse(String testProfileRunId,
        RequestOptions requestOptions) {
        return this.serviceClient.getTestProfileRunWithResponseAsync(testProfileRunId, requestOptions);
    }

    /**
     * List test profile runs.
     * 
     * Get all test profile runs for the given filters.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Maximum number of results to include in a single
     * response.</td></tr>
     * <tr><td>minStartDateTime</td><td>OffsetDateTime</td><td>No</td><td>Minimum Start DateTime(RFC 3339 literal
     * format) of the test profile runs to filter on.</td></tr>
     * <tr><td>maxStartDateTime</td><td>OffsetDateTime</td><td>No</td><td>Maximum Start DateTime(RFC 3339 literal
     * format) of the test profile runs to filter on.</td></tr>
     * <tr><td>minEndDateTime</td><td>OffsetDateTime</td><td>No</td><td>Minimum End DateTime(RFC 3339 literal format) of
     * the test profile runs to filter on.</td></tr>
     * <tr><td>maxEndDateTime</td><td>OffsetDateTime</td><td>No</td><td>Maximum End DateTime(RFC 3339 literal format) of
     * the test profile runs to filter on.</td></tr>
     * <tr><td>createdDateStartTime</td><td>OffsetDateTime</td><td>No</td><td>Start DateTime(RFC 3339 literal format) of
     * the created time range to filter test profile runs.</td></tr>
     * <tr><td>createdDateEndTime</td><td>OffsetDateTime</td><td>No</td><td>End DateTime(RFC 3339 literal format) of the
     * created time range to filter test profile runs.</td></tr>
     * <tr><td>testProfileRunIds</td><td>String</td><td>No</td><td>Comma separated list of IDs of the test profile runs
     * to filter.</td></tr>
     * <tr><td>testProfileIds</td><td>String</td><td>No</td><td>Comma separated IDs of the test profiles which should be
     * associated with the test profile runs to fetch.</td></tr>
     * <tr><td>statuses</td><td>String</td><td>No</td><td>Comma separated list of Statuses of the test profile runs to
     * filter.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testProfileRunId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testProfileId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     status: String(ACCEPTED/NOTSTARTED/EXECUTING/DONE/CANCELLING/CANCELLED/FAILED) (Optional)
     *     errorDetails (Optional): [
     *          (Optional){
     *             message: String (Optional)
     *         }
     *     ]
     *     startDateTime: OffsetDateTime (Optional)
     *     endDateTime: OffsetDateTime (Optional)
     *     durationInSeconds: Long (Optional)
     *     testRunDetails (Optional): {
     *         String (Required): {
     *             status: String(ACCEPTED/NOTSTARTED/PROVISIONING/PROVISIONED/CONFIGURING/CONFIGURED/EXECUTING/EXECUTED/DEPROVISIONING/DEPROVISIONED/DONE/CANCELLING/CANCELLED/FAILED/VALIDATION_SUCCESS/VALIDATION_FAILURE) (Required)
     *             configurationId: String (Required)
     *             properties (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     recommendations (Optional): [
     *          (Optional){
     *             category: String(ThroughputOptimized/CostOptimized) (Required)
     *             configurations (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all test profile runs for the given filters as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listTestProfileRuns(RequestOptions requestOptions) {
        return this.serviceClient.listTestProfileRunsAsync(requestOptions);
    }

    /**
     * Stop test profile run.
     * 
     * Stop test profile run for the given test profile run Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testProfileRunId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testProfileId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     status: String(ACCEPTED/NOTSTARTED/EXECUTING/DONE/CANCELLING/CANCELLED/FAILED) (Optional)
     *     errorDetails (Optional): [
     *          (Optional){
     *             message: String (Optional)
     *         }
     *     ]
     *     startDateTime: OffsetDateTime (Optional)
     *     endDateTime: OffsetDateTime (Optional)
     *     durationInSeconds: Long (Optional)
     *     testRunDetails (Optional): {
     *         String (Required): {
     *             status: String(ACCEPTED/NOTSTARTED/PROVISIONING/PROVISIONED/CONFIGURING/CONFIGURED/EXECUTING/EXECUTED/DEPROVISIONING/DEPROVISIONED/DONE/CANCELLING/CANCELLED/FAILED/VALIDATION_SUCCESS/VALIDATION_FAILURE) (Required)
     *             configurationId: String (Required)
     *             properties (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     }
     *     recommendations (Optional): [
     *          (Optional){
     *             category: String(ThroughputOptimized/CostOptimized) (Required)
     *             configurations (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param testProfileRunId Unique identifier for the test profile run, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test Profile Run model along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> stopTestProfileRunWithResponse(String testProfileRunId,
        RequestOptions requestOptions) {
        return this.serviceClient.stopTestProfileRunWithResponseAsync(testProfileRunId, requestOptions);
    }

    /**
     * Create and start a new test profile run.
     * 
     * Create and start a new test profile run with the given test profile run Id.
     * 
     * @param testProfileRunId Unique identifier for the test profile run, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param body The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test Profile Run model on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestProfileRun> createOrUpdateTestProfileRun(String testProfileRunId, TestProfileRun body) {
        // Generated convenience method for createOrUpdateTestProfileRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getTestProfileRunAccessor().prepareModelForJsonMergePatch(body, true);
        BinaryData bodyInBinaryData = BinaryData.fromObject(body);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        bodyInBinaryData.getLength();
        JsonMergePatchHelper.getTestProfileRunAccessor().prepareModelForJsonMergePatch(body, false);
        return createOrUpdateTestProfileRunWithResponse(testProfileRunId, bodyInBinaryData, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TestProfileRun.class));
    }

    /**
     * Delete an existing load test profile run.
     * 
     * Delete an existing load test profile run by providing the test profile run Id.
     * 
     * @param testProfileRunId Unique identifier for the test profile run, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteTestProfileRun(String testProfileRunId) {
        // Generated convenience method for deleteTestProfileRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteTestProfileRunWithResponse(testProfileRunId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get test profile run details.
     * 
     * Get test profile run details by test profile run Id.
     * 
     * @param testProfileRunId Unique identifier for the test profile run, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test profile run details by test profile run Id on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestProfileRun> getTestProfileRun(String testProfileRunId) {
        // Generated convenience method for getTestProfileRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTestProfileRunWithResponse(testProfileRunId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TestProfileRun.class));
    }

    /**
     * List test profile runs.
     * 
     * Get all test profile runs for the given filters.
     * 
     * @param minStartDateTime Minimum Start DateTime(RFC 3339 literal format) of the test profile runs to filter on.
     * @param maxStartDateTime Maximum Start DateTime(RFC 3339 literal format) of the test profile runs to filter on.
     * @param minEndDateTime Minimum End DateTime(RFC 3339 literal format) of the test profile runs to filter on.
     * @param maxEndDateTime Maximum End DateTime(RFC 3339 literal format) of the test profile runs to filter on.
     * @param createdDateStartTime Start DateTime(RFC 3339 literal format) of the created time range to filter test
     * profile runs.
     * @param createdDateEndTime End DateTime(RFC 3339 literal format) of the created time range to filter test profile
     * runs.
     * @param testProfileRunIds Comma separated list of IDs of the test profile runs to filter.
     * @param testProfileIds Comma separated IDs of the test profiles which should be associated with the test profile
     * runs to fetch.
     * @param statuses Comma separated list of Statuses of the test profile runs to filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test profile runs for the given filters as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<TestProfileRun> listTestProfileRuns(OffsetDateTime minStartDateTime,
        OffsetDateTime maxStartDateTime, OffsetDateTime minEndDateTime, OffsetDateTime maxEndDateTime,
        OffsetDateTime createdDateStartTime, OffsetDateTime createdDateEndTime, String testProfileRunIds,
        String testProfileIds, String statuses) {
        // Generated convenience method for listTestProfileRuns
        RequestOptions requestOptions = new RequestOptions();
        if (minStartDateTime != null) {
            requestOptions.addQueryParam("minStartDateTime", String.valueOf(minStartDateTime), false);
        }
        if (maxStartDateTime != null) {
            requestOptions.addQueryParam("maxStartDateTime", String.valueOf(maxStartDateTime), false);
        }
        if (minEndDateTime != null) {
            requestOptions.addQueryParam("minEndDateTime", String.valueOf(minEndDateTime), false);
        }
        if (maxEndDateTime != null) {
            requestOptions.addQueryParam("maxEndDateTime", String.valueOf(maxEndDateTime), false);
        }
        if (createdDateStartTime != null) {
            requestOptions.addQueryParam("createdDateStartTime", String.valueOf(createdDateStartTime), false);
        }
        if (createdDateEndTime != null) {
            requestOptions.addQueryParam("createdDateEndTime", String.valueOf(createdDateEndTime), false);
        }
        if (testProfileRunIds != null) {
            requestOptions.addQueryParam("testProfileRunIds", testProfileRunIds, false);
        }
        if (testProfileIds != null) {
            requestOptions.addQueryParam("testProfileIds", testProfileIds, false);
        }
        if (statuses != null) {
            requestOptions.addQueryParam("statuses", statuses, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listTestProfileRuns(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, TestProfileRun>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(TestProfileRun.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * List test profile runs.
     * 
     * Get all test profile runs for the given filters.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test profile runs for the given filters as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<TestProfileRun> listTestProfileRuns() {
        // Generated convenience method for listTestProfileRuns
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listTestProfileRuns(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, TestProfileRun>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(TestProfileRun.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Stop test profile run.
     * 
     * Stop test profile run for the given test profile run Id.
     * 
     * @param testProfileRunId Unique identifier for the test profile run, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test Profile Run model on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestProfileRun> stopTestProfileRun(String testProfileRunId) {
        // Generated convenience method for stopTestProfileRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return stopTestProfileRunWithResponse(testProfileRunId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TestProfileRun.class));
    }
}
