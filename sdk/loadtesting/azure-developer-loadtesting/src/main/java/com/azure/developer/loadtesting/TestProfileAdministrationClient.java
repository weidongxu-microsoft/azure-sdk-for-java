// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.developer.loadtesting.models.TestProfile;
import java.time.OffsetDateTime;

/**
 * Initializes a new instance of the synchronous TestProfileAdministrationClient type.
 */
@ServiceClient(builder = TestProfileAdministrationClientBuilder.class)
public final class TestProfileAdministrationClient {
    @Generated
    private final TestProfileAdministrationAsyncClient client;

    /**
     * Initializes an instance of TestProfileAdministrationClient class.
     * 
     * @param client the async client.
     */
    @Generated
    TestProfileAdministrationClient(TestProfileAdministrationAsyncClient client) {
        this.client = client;
    }

    /**
     * Create a new test profile or update an existing test profile.
     * 
     * Create a new test profile or update an existing test profile by providing the test profile Id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testProfileId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testProfileId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param body The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test Profile Model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateTestProfileWithResponse(String testProfileId, BinaryData body,
        RequestOptions requestOptions) {
        return this.client.createOrUpdateTestProfileWithResponse(testProfileId, body, requestOptions).block();
    }

    /**
     * Delete a test profile.
     * 
     * Delete a test profile by its test profile Id.
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTestProfileWithResponse(String testProfileId, RequestOptions requestOptions) {
        return this.client.deleteTestProfileWithResponse(testProfileId, requestOptions).block();
    }

    /**
     * Get load test profile details.
     * 
     * Get load test profile details by test profile Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testProfileId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test profile details by test profile Id along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTestProfileWithResponse(String testProfileId, RequestOptions requestOptions) {
        return this.client.getTestProfileWithResponse(testProfileId, requestOptions).block();
    }

    /**
     * List test profiles.
     * 
     * Get all test profiles for the given filters.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Maximum number of results to include in a single
     * response.</td></tr>
     * <tr><td>lastModifiedStartTime</td><td>OffsetDateTime</td><td>No</td><td>Start DateTime(RFC 3339 literal format)
     * of the last updated time range to filter test profiles.</td></tr>
     * <tr><td>lastModifiedEndTime</td><td>OffsetDateTime</td><td>No</td><td>End DateTime(RFC 3339 literal format) of
     * the last updated time range to filter test profiles.</td></tr>
     * <tr><td>testProfileIds</td><td>String</td><td>No</td><td>Comma separated list of IDs of the test profiles to
     * filter.</td></tr>
     * <tr><td>testIds</td><td>String</td><td>No</td><td>Comma separated list IDs of the tests which should be
     * associated with the test profiles to fetch.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testProfileId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all test profiles for the given filters as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTestProfiles(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listTestProfiles(requestOptions));
    }

    /**
     * Create a new test profile or update an existing test profile.
     * 
     * Create a new test profile or update an existing test profile by providing the test profile Id.
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param body The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test Profile Model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestProfile createOrUpdateTestProfile(String testProfileId, TestProfile body) {
        // Generated convenience method for createOrUpdateTestProfileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getTestProfileAccessor().prepareModelForJsonMergePatch(body, true);
        BinaryData bodyInBinaryData = BinaryData.fromObject(body);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        bodyInBinaryData.getLength();
        JsonMergePatchHelper.getTestProfileAccessor().prepareModelForJsonMergePatch(body, false);
        return createOrUpdateTestProfileWithResponse(testProfileId, bodyInBinaryData, requestOptions).getValue()
            .toObject(TestProfile.class);
    }

    /**
     * Delete a test profile.
     * 
     * Delete a test profile by its test profile Id.
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTestProfile(String testProfileId) {
        // Generated convenience method for deleteTestProfileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteTestProfileWithResponse(testProfileId, requestOptions).getValue();
    }

    /**
     * Get load test profile details.
     * 
     * Get load test profile details by test profile Id.
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test profile details by test profile Id.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestProfile getTestProfile(String testProfileId) {
        // Generated convenience method for getTestProfileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTestProfileWithResponse(testProfileId, requestOptions).getValue().toObject(TestProfile.class);
    }

    /**
     * List test profiles.
     * 
     * Get all test profiles for the given filters.
     * 
     * @param lastModifiedStartTime Start DateTime(RFC 3339 literal format) of the last updated time range to filter
     * test profiles.
     * @param lastModifiedEndTime End DateTime(RFC 3339 literal format) of the last updated time range to filter test
     * profiles.
     * @param testProfileIds Comma separated list of IDs of the test profiles to filter.
     * @param testIds Comma separated list IDs of the tests which should be associated with the test profiles to fetch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test profiles for the given filters as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TestProfile> listTestProfiles(OffsetDateTime lastModifiedStartTime,
        OffsetDateTime lastModifiedEndTime, String testProfileIds, String testIds) {
        // Generated convenience method for listTestProfiles
        return new PagedIterable<>(
            client.listTestProfiles(lastModifiedStartTime, lastModifiedEndTime, testProfileIds, testIds));
    }

    /**
     * List test profiles.
     * 
     * Get all test profiles for the given filters.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test profiles for the given filters as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TestProfile> listTestProfiles() {
        // Generated convenience method for listTestProfiles
        return new PagedIterable<>(client.listTestProfiles());
    }
}
