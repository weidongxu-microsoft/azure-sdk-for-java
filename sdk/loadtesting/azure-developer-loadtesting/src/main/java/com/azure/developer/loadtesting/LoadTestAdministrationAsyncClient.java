// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.developer.loadtesting.implementation.LoadTestAdministrationClientImpl;
import com.azure.developer.loadtesting.models.FileType;
import com.azure.developer.loadtesting.models.Test;
import com.azure.developer.loadtesting.models.TestAppComponents;
import com.azure.developer.loadtesting.models.TestFileInfo;
import com.azure.developer.loadtesting.models.TestServerMetricConfig;
import java.time.OffsetDateTime;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous LoadTestAdministrationClient type.
 */
@ServiceClient(builder = LoadTestAdministrationClientBuilder.class, isAsync = true)
public final class LoadTestAdministrationAsyncClient {
    @Generated
    private final LoadTestAdministrationClientImpl serviceClient;

    /**
     * Initializes an instance of LoadTestAdministrationAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    LoadTestAdministrationAsyncClient(LoadTestAdministrationClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create a new test or update an existing test by providing the test Id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Required): {
     *                 clientMetric: String(response_time_ms/latency/error/requests/requests_per_sec) (Optional)
     *                 aggregate: String(count/percentage/avg/p50/p75/p90/p95/p96/p97/p98/p99/p99.9/p99.99/min/max) (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String(continue/stop) (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String(passed/undetermined/failed) (Optional)
     *             }
     *         }
     *     }
     *     autoStopCriteria (Optional): {
     *         autoStopDisabled: Boolean (Optional)
     *         errorRate: Double (Optional)
     *         errorRateTimeWindowInSeconds: Integer (Optional)
     *     }
     *     secrets (Optional): {
     *         String (Required): {
     *             value: String (Optional)
     *             type: String(AKV_SECRET_URI/SECRET_VALUE) (Optional)
     *         }
     *     }
     *     certificate (Optional): {
     *         value: String (Optional)
     *         type: String(AKV_CERT_URI) (Optional)
     *         name: String (Optional)
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Required)
     *     }
     *     loadTestConfiguration (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *         quickStartTest: Boolean (Optional)
     *         optionalLoadTestConfig (Optional): {
     *             endpointUrl: String (Optional)
     *             requestsPerSecond: Integer (Optional)
     *             maxResponseTimeInMs: Integer (Optional)
     *             virtualUsers: Integer (Optional)
     *             rampUpTime: Integer (Optional)
     *             duration: Integer (Optional)
     *         }
     *         regionalLoadTestConfig (Optional): [
     *              (Optional){
     *                 engineInstances: int (Optional, Required on create)
     *                 region: String (Optional, Required on create)
     *             }
     *         ]
     *     }
     *     baselineTestRunId: String (Optional)
     *     inputArtifacts (Optional): {
     *         configFileInfo (Optional): {
     *             fileName: String (Required)
     *             url: String (Optional)
     *             fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)
     *             expireDateTime: OffsetDateTime (Optional)
     *             validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)
     *             validationFailureDetails: String (Optional)
     *         }
     *         testScriptFileInfo (Optional): (recursive schema, see testScriptFileInfo above)
     *         userPropFileInfo (Optional): (recursive schema, see userPropFileInfo above)
     *         inputArtifactsZipFileInfo (Optional): (recursive schema, see inputArtifactsZipFileInfo above)
     *         urlTestConfigFileInfo (Optional): (recursive schema, see urlTestConfigFileInfo above)
     *         additionalFileInfo (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     testId: String (Required)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     subnetId: String (Optional)
     *     kind: String(URL/JMX/Locust) (Optional)
     *     publicIPDisabled: Boolean (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Required): {
     *                 clientMetric: String(response_time_ms/latency/error/requests/requests_per_sec) (Optional)
     *                 aggregate: String(count/percentage/avg/p50/p75/p90/p95/p96/p97/p98/p99/p99.9/p99.99/min/max) (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String(continue/stop) (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String(passed/undetermined/failed) (Optional)
     *             }
     *         }
     *     }
     *     autoStopCriteria (Optional): {
     *         autoStopDisabled: Boolean (Optional)
     *         errorRate: Double (Optional)
     *         errorRateTimeWindowInSeconds: Integer (Optional)
     *     }
     *     secrets (Optional): {
     *         String (Required): {
     *             value: String (Optional)
     *             type: String(AKV_SECRET_URI/SECRET_VALUE) (Optional)
     *         }
     *     }
     *     certificate (Optional): {
     *         value: String (Optional)
     *         type: String(AKV_CERT_URI) (Optional)
     *         name: String (Optional)
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Required)
     *     }
     *     loadTestConfiguration (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *         quickStartTest: Boolean (Optional)
     *         optionalLoadTestConfig (Optional): {
     *             endpointUrl: String (Optional)
     *             requestsPerSecond: Integer (Optional)
     *             maxResponseTimeInMs: Integer (Optional)
     *             virtualUsers: Integer (Optional)
     *             rampUpTime: Integer (Optional)
     *             duration: Integer (Optional)
     *         }
     *         regionalLoadTestConfig (Optional): [
     *              (Optional){
     *                 engineInstances: int (Optional, Required on create)
     *                 region: String (Optional, Required on create)
     *             }
     *         ]
     *     }
     *     baselineTestRunId: String (Optional)
     *     inputArtifacts (Optional): {
     *         configFileInfo (Optional): {
     *             fileName: String (Required)
     *             url: String (Optional)
     *             fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)
     *             expireDateTime: OffsetDateTime (Optional)
     *             validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)
     *             validationFailureDetails: String (Optional)
     *         }
     *         testScriptFileInfo (Optional): (recursive schema, see testScriptFileInfo above)
     *         userPropFileInfo (Optional): (recursive schema, see userPropFileInfo above)
     *         inputArtifactsZipFileInfo (Optional): (recursive schema, see inputArtifactsZipFileInfo above)
     *         urlTestConfigFileInfo (Optional): (recursive schema, see urlTestConfigFileInfo above)
     *         additionalFileInfo (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     testId: String (Required)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     subnetId: String (Optional)
     *     kind: String(URL/JMX/Locust) (Optional)
     *     publicIPDisabled: Boolean (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param body The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test model along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateTestWithResponse(String testId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateTestWithResponseAsync(testId, body, requestOptions);
    }

    /**
     * Add an app component to a test.
     * 
     * Add an app component to a test by providing the resource Id, name and type.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     components (Optional, Required on create): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Optional, Required on create)
     *             resourceType: String (Optional, Required on create)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     *     testId: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     components (Optional, Required on create): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Optional, Required on create)
     *             resourceType: String (Optional, Required on create)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     *     testId: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param body App Component model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test app components along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateAppComponentsWithResponse(String testId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateAppComponentsWithResponseAsync(testId, body, requestOptions);
    }

    /**
     * Configure server metrics for a test.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testId: String (Optional)
     *     metrics (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional)
     *             resourceId: String (Optional, Required on create)
     *             metricNamespace: String (Optional, Required on create)
     *             displayDescription: String (Optional)
     *             name: String (Optional, Required on create)
     *             aggregation: String (Optional, Required on create)
     *             unit: String (Optional)
     *             resourceType: String (Optional, Required on create)
     *         }
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testId: String (Optional)
     *     metrics (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional)
     *             resourceId: String (Optional, Required on create)
     *             metricNamespace: String (Optional, Required on create)
     *             displayDescription: String (Optional)
     *             name: String (Optional, Required on create)
     *             aggregation: String (Optional, Required on create)
     *             unit: String (Optional)
     *             resourceType: String (Optional, Required on create)
     *         }
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param body Server metric configuration model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test server metrics configuration along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateServerMetricsConfigWithResponse(String testId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateServerMetricsConfigWithResponseAsync(testId, body, requestOptions);
    }

    /**
     * Get associated app component (collection of azure resources) for the given test.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     components (Optional, Required on create): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Optional, Required on create)
     *             resourceType: String (Optional, Required on create)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     *     testId: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return associated app component (collection of azure resources) for the given test along with {@link Response}
     * on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAppComponentsWithResponse(String testId, RequestOptions requestOptions) {
        return this.serviceClient.getAppComponentsWithResponseAsync(testId, requestOptions);
    }

    /**
     * List server metrics configuration for the given test.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testId: String (Optional)
     *     metrics (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional)
     *             resourceId: String (Optional, Required on create)
     *             metricNamespace: String (Optional, Required on create)
     *             displayDescription: String (Optional)
     *             name: String (Optional, Required on create)
     *             aggregation: String (Optional, Required on create)
     *             unit: String (Optional)
     *             resourceType: String (Optional, Required on create)
     *         }
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test server metrics configuration along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServerMetricsConfigWithResponse(String testId, RequestOptions requestOptions) {
        return this.serviceClient.getServerMetricsConfigWithResponseAsync(testId, requestOptions);
    }

    /**
     * Get load test details by test Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Required): {
     *                 clientMetric: String(response_time_ms/latency/error/requests/requests_per_sec) (Optional)
     *                 aggregate: String(count/percentage/avg/p50/p75/p90/p95/p96/p97/p98/p99/p99.9/p99.99/min/max) (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String(continue/stop) (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String(passed/undetermined/failed) (Optional)
     *             }
     *         }
     *     }
     *     autoStopCriteria (Optional): {
     *         autoStopDisabled: Boolean (Optional)
     *         errorRate: Double (Optional)
     *         errorRateTimeWindowInSeconds: Integer (Optional)
     *     }
     *     secrets (Optional): {
     *         String (Required): {
     *             value: String (Optional)
     *             type: String(AKV_SECRET_URI/SECRET_VALUE) (Optional)
     *         }
     *     }
     *     certificate (Optional): {
     *         value: String (Optional)
     *         type: String(AKV_CERT_URI) (Optional)
     *         name: String (Optional)
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Required)
     *     }
     *     loadTestConfiguration (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *         quickStartTest: Boolean (Optional)
     *         optionalLoadTestConfig (Optional): {
     *             endpointUrl: String (Optional)
     *             requestsPerSecond: Integer (Optional)
     *             maxResponseTimeInMs: Integer (Optional)
     *             virtualUsers: Integer (Optional)
     *             rampUpTime: Integer (Optional)
     *             duration: Integer (Optional)
     *         }
     *         regionalLoadTestConfig (Optional): [
     *              (Optional){
     *                 engineInstances: int (Optional, Required on create)
     *                 region: String (Optional, Required on create)
     *             }
     *         ]
     *     }
     *     baselineTestRunId: String (Optional)
     *     inputArtifacts (Optional): {
     *         configFileInfo (Optional): {
     *             fileName: String (Required)
     *             url: String (Optional)
     *             fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)
     *             expireDateTime: OffsetDateTime (Optional)
     *             validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)
     *             validationFailureDetails: String (Optional)
     *         }
     *         testScriptFileInfo (Optional): (recursive schema, see testScriptFileInfo above)
     *         userPropFileInfo (Optional): (recursive schema, see userPropFileInfo above)
     *         inputArtifactsZipFileInfo (Optional): (recursive schema, see inputArtifactsZipFileInfo above)
     *         urlTestConfigFileInfo (Optional): (recursive schema, see urlTestConfigFileInfo above)
     *         additionalFileInfo (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     testId: String (Required)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     subnetId: String (Optional)
     *     kind: String(URL/JMX/Locust) (Optional)
     *     publicIPDisabled: Boolean (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test details by test Id along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestWithResponse(String testId, RequestOptions requestOptions) {
        return this.serviceClient.getTestWithResponseAsync(testId, requestOptions);
    }

    /**
     * Get all the files that are associated with a test.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     fileName: String (Required)
     *     url: String (Optional)
     *     fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)
     *     expireDateTime: OffsetDateTime (Optional)
     *     validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)
     *     validationFailureDetails: String (Optional)
     * }
     * }</pre>
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param fileName Name of the file.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all the files that are associated with a test along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestFileWithResponse(String testId, String fileName,
        RequestOptions requestOptions) {
        return this.serviceClient.getTestFileWithResponseAsync(testId, fileName, requestOptions);
    }

    /**
     * Get all test files.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     fileName: String (Required)
     *     url: String (Optional)
     *     fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)
     *     expireDateTime: OffsetDateTime (Optional)
     *     validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)
     *     validationFailureDetails: String (Optional)
     * }
     * }</pre>
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all test files as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listTestFiles(String testId, RequestOptions requestOptions) {
        return this.serviceClient.listTestFilesAsync(testId, requestOptions);
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>orderby</td><td>String</td><td>No</td><td>Sort on the supported fields in (field asc/desc) format. eg:
     * lastModifiedDateTime asc. Supported fields - lastModifiedDateTime</td></tr>
     * <tr><td>search</td><td>String</td><td>No</td><td>Prefix based, case sensitive search on searchable fields -
     * displayName,
     * createdBy. For example, to search for a test, with display name is Login Test,
     * the search parameter can be Login.</td></tr>
     * <tr><td>lastModifiedStartTime</td><td>OffsetDateTime</td><td>No</td><td>Start DateTime(RFC 3339 literal format)
     * of the last updated time range to filter tests.</td></tr>
     * <tr><td>lastModifiedEndTime</td><td>OffsetDateTime</td><td>No</td><td>End DateTime(RFC 3339 literal format) of
     * the last updated time range to filter tests.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of results in response.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Required): {
     *                 clientMetric: String(response_time_ms/latency/error/requests/requests_per_sec) (Optional)
     *                 aggregate: String(count/percentage/avg/p50/p75/p90/p95/p96/p97/p98/p99/p99.9/p99.99/min/max) (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String(continue/stop) (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String(passed/undetermined/failed) (Optional)
     *             }
     *         }
     *     }
     *     autoStopCriteria (Optional): {
     *         autoStopDisabled: Boolean (Optional)
     *         errorRate: Double (Optional)
     *         errorRateTimeWindowInSeconds: Integer (Optional)
     *     }
     *     secrets (Optional): {
     *         String (Required): {
     *             value: String (Optional)
     *             type: String(AKV_SECRET_URI/SECRET_VALUE) (Optional)
     *         }
     *     }
     *     certificate (Optional): {
     *         value: String (Optional)
     *         type: String(AKV_CERT_URI) (Optional)
     *         name: String (Optional)
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Required)
     *     }
     *     loadTestConfiguration (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *         quickStartTest: Boolean (Optional)
     *         optionalLoadTestConfig (Optional): {
     *             endpointUrl: String (Optional)
     *             requestsPerSecond: Integer (Optional)
     *             maxResponseTimeInMs: Integer (Optional)
     *             virtualUsers: Integer (Optional)
     *             rampUpTime: Integer (Optional)
     *             duration: Integer (Optional)
     *         }
     *         regionalLoadTestConfig (Optional): [
     *              (Optional){
     *                 engineInstances: int (Optional, Required on create)
     *                 region: String (Optional, Required on create)
     *             }
     *         ]
     *     }
     *     baselineTestRunId: String (Optional)
     *     inputArtifacts (Optional): {
     *         configFileInfo (Optional): {
     *             fileName: String (Required)
     *             url: String (Optional)
     *             fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)
     *             expireDateTime: OffsetDateTime (Optional)
     *             validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)
     *             validationFailureDetails: String (Optional)
     *         }
     *         testScriptFileInfo (Optional): (recursive schema, see testScriptFileInfo above)
     *         userPropFileInfo (Optional): (recursive schema, see userPropFileInfo above)
     *         inputArtifactsZipFileInfo (Optional): (recursive schema, see inputArtifactsZipFileInfo above)
     *         urlTestConfigFileInfo (Optional): (recursive schema, see urlTestConfigFileInfo above)
     *         additionalFileInfo (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     testId: String (Required)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     subnetId: String (Optional)
     *     kind: String(URL/JMX/Locust) (Optional)
     *     publicIPDisabled: Boolean (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} as paginated
     * response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listTests(RequestOptions requestOptions) {
        return this.serviceClient.listTestsAsync(requestOptions);
    }

    /**
     * Upload input file for a given test Id. File size can't be more than 50 MB.
     * Existing file with same name for the given test will be overwritten. File
     * should be provided in the request body as application/octet-stream.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>fileType</td><td>String</td><td>No</td><td>File type. Allowed values: "JMX_FILE", "USER_PROPERTIES",
     * "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", "TEST_SCRIPT".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     fileName: String (Required)
     *     url: String (Optional)
     *     fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)
     *     expireDateTime: OffsetDateTime (Optional)
     *     validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)
     *     validationFailureDetails: String (Optional)
     * }
     * }</pre>
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param fileName Unique name for test file with file extension like : App.jmx.
     * @param body The file content as application/octet-stream.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test file info along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> uploadTestFileWithResponse(String testId, String fileName, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.uploadTestFileWithResponseAsync(testId, fileName, body, requestOptions);
    }

    /**
     * Delete file by the file name for a test.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param fileName Name of the file.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTestFileWithResponse(String testId, String fileName,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteTestFileWithResponseAsync(testId, fileName, requestOptions);
    }

    /**
     * Delete a test by its test Id.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTestWithResponse(String testId, RequestOptions requestOptions) {
        return this.serviceClient.deleteTestWithResponseAsync(testId, requestOptions);
    }

    /**
     * Create a new test or update an existing test by providing the test Id.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param body The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test model on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Test> createOrUpdateTest(String testId, Test body) {
        // Generated convenience method for createOrUpdateTestWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getTestAccessor().prepareModelForJsonMergePatch(body, true);
        BinaryData bodyInBinaryData = BinaryData.fromObject(body);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        bodyInBinaryData.getLength();
        JsonMergePatchHelper.getTestAccessor().prepareModelForJsonMergePatch(body, false);
        return createOrUpdateTestWithResponse(testId, bodyInBinaryData, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Test.class));
    }

    /**
     * Add an app component to a test.
     * 
     * Add an app component to a test by providing the resource Id, name and type.
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param body App Component model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test app components on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestAppComponents> createOrUpdateAppComponents(String testId, TestAppComponents body) {
        // Generated convenience method for createOrUpdateAppComponentsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getTestAppComponentsAccessor().prepareModelForJsonMergePatch(body, true);
        BinaryData bodyInBinaryData = BinaryData.fromObject(body);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        bodyInBinaryData.getLength();
        JsonMergePatchHelper.getTestAppComponentsAccessor().prepareModelForJsonMergePatch(body, false);
        return createOrUpdateAppComponentsWithResponse(testId, bodyInBinaryData, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TestAppComponents.class));
    }

    /**
     * Configure server metrics for a test.
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param body Server metric configuration model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test server metrics configuration on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestServerMetricConfig> createOrUpdateServerMetricsConfig(String testId, TestServerMetricConfig body) {
        // Generated convenience method for createOrUpdateServerMetricsConfigWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getTestServerMetricConfigAccessor().prepareModelForJsonMergePatch(body, true);
        BinaryData bodyInBinaryData = BinaryData.fromObject(body);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        bodyInBinaryData.getLength();
        JsonMergePatchHelper.getTestServerMetricConfigAccessor().prepareModelForJsonMergePatch(body, false);
        return createOrUpdateServerMetricsConfigWithResponse(testId, bodyInBinaryData, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TestServerMetricConfig.class));
    }

    /**
     * Get associated app component (collection of azure resources) for the given test.
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return associated app component (collection of azure resources) for the given test on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestAppComponents> getAppComponents(String testId) {
        // Generated convenience method for getAppComponentsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAppComponentsWithResponse(testId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TestAppComponents.class));
    }

    /**
     * List server metrics configuration for the given test.
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test server metrics configuration on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestServerMetricConfig> getServerMetricsConfig(String testId) {
        // Generated convenience method for getServerMetricsConfigWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getServerMetricsConfigWithResponse(testId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TestServerMetricConfig.class));
    }

    /**
     * Get load test details by test Id.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test details by test Id on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Test> getTest(String testId) {
        // Generated convenience method for getTestWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTestWithResponse(testId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Test.class));
    }

    /**
     * Get all the files that are associated with a test.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param fileName Name of the file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the files that are associated with a test on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestFileInfo> getTestFile(String testId, String fileName) {
        // Generated convenience method for getTestFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTestFileWithResponse(testId, fileName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TestFileInfo.class));
    }

    /**
     * Get all test files.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test files as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<TestFileInfo> listTestFiles(String testId) {
        // Generated convenience method for listTestFiles
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listTestFiles(testId, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, TestFileInfo>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(TestFileInfo.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     * 
     * @param orderBy Sort on the supported fields in (field asc/desc) format. eg:
     * lastModifiedDateTime asc. Supported fields - lastModifiedDateTime.
     * @param search Prefix based, case sensitive search on searchable fields - displayName,
     * createdBy. For example, to search for a test, with display name is Login Test,
     * the search parameter can be Login.
     * @param lastModifiedStartTime Start DateTime(RFC 3339 literal format) of the last updated time range to filter
     * tests.
     * @param lastModifiedEndTime End DateTime(RFC 3339 literal format) of the last updated time range to filter tests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} as paginated
     * response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Test> listTests(String orderBy, String search, OffsetDateTime lastModifiedStartTime,
        OffsetDateTime lastModifiedEndTime) {
        // Generated convenience method for listTests
        RequestOptions requestOptions = new RequestOptions();
        if (orderBy != null) {
            requestOptions.addQueryParam("orderby", orderBy, false);
        }
        if (search != null) {
            requestOptions.addQueryParam("search", search, false);
        }
        if (lastModifiedStartTime != null) {
            requestOptions.addQueryParam("lastModifiedStartTime", String.valueOf(lastModifiedStartTime), false);
        }
        if (lastModifiedEndTime != null) {
            requestOptions.addQueryParam("lastModifiedEndTime", String.valueOf(lastModifiedEndTime), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listTests(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Test>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Test.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} as paginated
     * response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Test> listTests() {
        // Generated convenience method for listTests
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listTests(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Test>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Test.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Upload input file for a given test Id. File size can't be more than 50 MB.
     * Existing file with same name for the given test will be overwritten. File
     * should be provided in the request body as application/octet-stream.
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param fileName Unique name for test file with file extension like : App.jmx.
     * @param body The file content as application/octet-stream.
     * @param fileType File type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test file info on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestFileInfo> uploadTestFile(String testId, String fileName, BinaryData body, FileType fileType) {
        // Generated convenience method for uploadTestFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (fileType != null) {
            requestOptions.addQueryParam("fileType", fileType.toString(), false);
        }
        return uploadTestFileWithResponse(testId, fileName, body, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TestFileInfo.class));
    }

    /**
     * Upload input file for a given test Id. File size can't be more than 50 MB.
     * Existing file with same name for the given test will be overwritten. File
     * should be provided in the request body as application/octet-stream.
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param fileName Unique name for test file with file extension like : App.jmx.
     * @param body The file content as application/octet-stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test file info on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestFileInfo> uploadTestFile(String testId, String fileName, BinaryData body) {
        // Generated convenience method for uploadTestFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return uploadTestFileWithResponse(testId, fileName, body, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TestFileInfo.class));
    }

    /**
     * Delete file by the file name for a test.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param fileName Name of the file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteTestFile(String testId, String fileName) {
        // Generated convenience method for deleteTestFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteTestFileWithResponse(testId, fileName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Delete a test by its test Id.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteTest(String testId) {
        // Generated convenience method for deleteTestWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteTestWithResponse(testId, requestOptions).flatMap(FluxUtil::toMono);
    }
}
