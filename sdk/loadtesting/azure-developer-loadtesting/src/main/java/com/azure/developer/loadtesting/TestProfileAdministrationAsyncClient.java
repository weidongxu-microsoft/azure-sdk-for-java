// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.developer.loadtesting.implementation.TestProfileAdministrationClientImpl;
import com.azure.developer.loadtesting.models.TestProfile;
import java.time.OffsetDateTime;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous TestProfileAdministrationClient type.
 */
@ServiceClient(builder = TestProfileAdministrationClientBuilder.class, isAsync = true)
public final class TestProfileAdministrationAsyncClient {
    @Generated
    private final TestProfileAdministrationClientImpl serviceClient;

    /**
     * Initializes an instance of TestProfileAdministrationAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    TestProfileAdministrationAsyncClient(TestProfileAdministrationClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create a new test profile or update an existing test profile.
     * 
     * Create a new test profile or update an existing test profile by providing the test profile Id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testProfileId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testProfileId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param body The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test Profile Model along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateTestProfileWithResponse(String testProfileId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateTestProfileWithResponseAsync(testProfileId, body, requestOptions);
    }

    /**
     * Delete a test profile.
     * 
     * Delete a test profile by its test profile Id.
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTestProfileWithResponse(String testProfileId, RequestOptions requestOptions) {
        return this.serviceClient.deleteTestProfileWithResponseAsync(testProfileId, requestOptions);
    }

    /**
     * Get load test profile details.
     * 
     * Get load test profile details by test profile Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testProfileId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test profile details by test profile Id along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTestProfileWithResponse(String testProfileId, RequestOptions requestOptions) {
        return this.serviceClient.getTestProfileWithResponseAsync(testProfileId, requestOptions);
    }

    /**
     * List test profiles.
     * 
     * Get all test profiles for the given filters.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Maximum number of results to include in a single
     * response.</td></tr>
     * <tr><td>lastModifiedStartTime</td><td>OffsetDateTime</td><td>No</td><td>Start DateTime(RFC 3339 literal format)
     * of the last updated time range to filter test profiles.</td></tr>
     * <tr><td>lastModifiedEndTime</td><td>OffsetDateTime</td><td>No</td><td>End DateTime(RFC 3339 literal format) of
     * the last updated time range to filter test profiles.</td></tr>
     * <tr><td>testProfileIds</td><td>String</td><td>No</td><td>Comma separated list of IDs of the test profiles to
     * filter.</td></tr>
     * <tr><td>testIds</td><td>String</td><td>No</td><td>Comma separated list IDs of the tests which should be
     * associated with the test profiles to fetch.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     testProfileId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all test profiles for the given filters as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listTestProfiles(RequestOptions requestOptions) {
        return this.serviceClient.listTestProfilesAsync(requestOptions);
    }

    /**
     * Create a new test profile or update an existing test profile.
     * 
     * Create a new test profile or update an existing test profile by providing the test profile Id.
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param body The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test Profile Model on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestProfile> createOrUpdateTestProfile(String testProfileId, TestProfile body) {
        // Generated convenience method for createOrUpdateTestProfileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getTestProfileAccessor().prepareModelForJsonMergePatch(body, true);
        BinaryData bodyInBinaryData = BinaryData.fromObject(body);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        bodyInBinaryData.getLength();
        JsonMergePatchHelper.getTestProfileAccessor().prepareModelForJsonMergePatch(body, false);
        return createOrUpdateTestProfileWithResponse(testProfileId, bodyInBinaryData, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TestProfile.class));
    }

    /**
     * Delete a test profile.
     * 
     * Delete a test profile by its test profile Id.
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteTestProfile(String testProfileId) {
        // Generated convenience method for deleteTestProfileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteTestProfileWithResponse(testProfileId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get load test profile details.
     * 
     * Get load test profile details by test profile Id.
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test profile details by test profile Id on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestProfile> getTestProfile(String testProfileId) {
        // Generated convenience method for getTestProfileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTestProfileWithResponse(testProfileId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TestProfile.class));
    }

    /**
     * List test profiles.
     * 
     * Get all test profiles for the given filters.
     * 
     * @param lastModifiedStartTime Start DateTime(RFC 3339 literal format) of the last updated time range to filter
     * test profiles.
     * @param lastModifiedEndTime End DateTime(RFC 3339 literal format) of the last updated time range to filter test
     * profiles.
     * @param testProfileIds Comma separated list of IDs of the test profiles to filter.
     * @param testIds Comma separated list IDs of the tests which should be associated with the test profiles to fetch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test profiles for the given filters as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<TestProfile> listTestProfiles(OffsetDateTime lastModifiedStartTime,
        OffsetDateTime lastModifiedEndTime, String testProfileIds, String testIds) {
        // Generated convenience method for listTestProfiles
        RequestOptions requestOptions = new RequestOptions();
        if (lastModifiedStartTime != null) {
            requestOptions.addQueryParam("lastModifiedStartTime", String.valueOf(lastModifiedStartTime), false);
        }
        if (lastModifiedEndTime != null) {
            requestOptions.addQueryParam("lastModifiedEndTime", String.valueOf(lastModifiedEndTime), false);
        }
        if (testProfileIds != null) {
            requestOptions.addQueryParam("testProfileIds", testProfileIds, false);
        }
        if (testIds != null) {
            requestOptions.addQueryParam("testIds", testIds, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listTestProfiles(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, TestProfile>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(TestProfile.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * List test profiles.
     * 
     * Get all test profiles for the given filters.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test profiles for the given filters as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<TestProfile> listTestProfiles() {
        // Generated convenience method for listTestProfiles
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listTestProfiles(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, TestProfile>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(TestProfile.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }
}
